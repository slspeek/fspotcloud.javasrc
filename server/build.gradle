description = 'F-SpotCloud Server Component'

def cobSerFile = "${project.buildDir}/cobertura.ser"

configurations {
    provided
    instrumented
    cobTuRA
}

sourceSets {
    main { compileClasspath += configurations.provided }
}

dependencies {
    compile project(':rpc')
    compile project(':model-api')
    compile project(':user-service-api')
    compile project(':peer-rpc')
    compile 'org.jdom:jdom:1.1'
    compile libs.commons_codec
    compile libs.commons_lang
    compile libs.bot_dispatch_controller
    compile libs.bot_dispatch_api
    compile libs.bot_dispatch_command_api
    compile libs.task_dispatch_dispatch_api
    compile libs.simple_blobstore_api
    provided libs.servlet_spec
//    compile libs.servlet_spec
    compile libs.guava
    compile libs.javamail

    testCompile project(':model-jpa-j2ee')
    testCompile project(':test-util')
    testCompile project(path:':rpc', configuration:'testCompile')
    testCompile libs.junit
    testCompile libs.mockito
    testCompile libs.guava
    testCompile libs.jukito
    testCompile libs.http_unit
    cobTuRA group: 'net.sourceforge.cobertura', name: 'cobertura', version: '2.1.1'
    testRuntime group: 'net.sourceforge.cobertura', name: 'cobertura', version: '2.1.1'
    
    //For cobertura runtime only
    testRuntime libs.slf4j_log4j12

}



task cobertura_instrument(dependsOn: compileJava) << {
    ant.taskdef(resource: 'tasks.properties', classpath: configurations.cobTuRA.asPath)
    mkdir "build/instrumented"
    // instrument the classes in-place
    ant.'cobertura-instrument'(toDir: "build/instrumented", datafile: cobSerFile) {
        // only instrument the relevant classes
        fileset(dir: "${project.buildDir}/classes",
                includes: "**/*.class")

    }

}

task instrumentedJar(type: Jar, dependsOn: cobertura_instrument) {
    from "build/instrumented"
    classifier = 'instrumented'
}


test {
    exclude 'com/googlecode/fspotcloud/server/mail/MailerTest.class'
}

artifacts {
    instrumented instrumentedJar
}


