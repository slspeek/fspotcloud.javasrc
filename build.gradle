buildscript {
    repositories {
        maven {
            url maven_repo
            artifactUrls "http://fspotcloud-maven.googlecode.com/svn/maven/repository"
        }
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'GitHub'
            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
        }
        mavenLocal()
    }

    dependencies {
        classpath 'bmuschko:gradle-gae-plugin:0.7.3'
        classpath 'bmuschko:gradle-tomcat-plugin:0.9.1'
        classpath 'desource:gradle-gwt-plugin:0.32'
    }
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'com.googlecode.fspotcloud'
    version = "0.9b10"
    project.ext {
        libs = [
                bot_dispatch_bot: "com.googlecode.bot-dispatch:bot:${bot_dispatch_version}",
                bot_dispatch_controller: "com.googlecode.bot-dispatch:controller:${bot_dispatch_version}",
                bot_dispatch_api: "com.googlecode.bot-dispatch:bot-dispatch-api:${bot_dispatch_version}",
                bot_dispatch_command_api: "com.googlecode.bot-dispatch:command-api:${bot_dispatch_version}",
                inject: "javax.inject:javax.inject:1",
                junit: "junit:junit:4.10",
                guice: "com.google.inject:guice:${guice_version}",
                guice_assisted_inject: "com.google.inject.extensions:guice-assistedinject:${guice_version}",
                guice_servlet: "com.google.inject.extensions:guice-servlet:${guice_version}",
                guiceberry: "com.google.guiceberry:guiceberry:${guiceberry_version}",
                javamail: "javax.mail:mail:1.4",
                jdo_api: "javax.jdo:jdo-api:3.0",
                jta: "javax.transaction:jta:1.1",
                commons_lang: "commons-lang:commons-lang:2.6",
                commons_codec: "commons-codec:commons-codec:1.7",
                gae_testing: ["com.google.appengine:appengine-local-runtime:${gae_version}",
                        "com.google.appengine:appengine-api-stubs:${gae_version}",
                        "com.google.appengine:appengine-testing:${gae_version}"],
                ginmvp: "com.google.code.ginmvp:ginmvp-core:1.1",
                guava: "com.google.guava:guava:${guava_version}",
                guava_gwt: "com.google.guava:guava-gwt:${guava_version}",
                gwt_dispatch: "net.customware.gwt.dispatch:gwt-dispatch:1.2.0",
                gwt_servlet: "com.google.gwt:gwt-servlet:${gwt_version}",
                gwt_test_utils: "com.googlecode.gwt-test-utils:gwt-test-utils:0.43",
                hibernate_all: ["org.hibernate:hibernate-core:${hibernate_version}",
                        "javassist:javassist:3.12.0.GA",
                        "org.hibernate:hibernate-validator-annotation-processor:4.1.0.Final",
                        "org.slf4j:slf4j-log4j12:1.7.2",
                        "org.hibernate:hibernate-entitymanager:${hibernate_version}"],
                servlet_spec: dependencies.create("org.apache.geronimo.specs:geronimo-servlet_2.5_spec:1.2") {
                    transitive = false
                },
                mockito: "org.mockito:mockito-core:1.9.0-rc1",
                openpojo: ["com.googlecode.openpojo:openpojo:0.3.9", 'log4j:log4j:1.2.17'],
                        guava_testlib: "com.google.guava:guava-testlib:10.0.1",
                derby_all: ["org.apache.derby:derby:${derby_version}",
                        "org.apache.derby:derbyclient:${derby_version}",
                        "org.apache.derby:derbynet:${derby_version}",
                        "org.apache.derby:derbytools:${derby_version}"],
                selenium: ["org.seleniumhq.selenium:selenium-java:2.33.0",
                        "org.seleniumhq.selenium:selenium-firefox-driver:2.33.0"],
                simple_jpa_dao_api: "com.googlecode.simple-jpa-dao:dao-api:${simple_jpa_dao_version}",
                simple_jpa_dao_impl: "com.googlecode.simple-jpa-dao:dao-impl:${simple_jpa_dao_version}",
                simple_jpa_dao_cached_dao: "com.googlecode.simple-jpa-dao:cached-dao:${simple_jpa_dao_version}",
                simple_jpa_dao_namedid_test: "com.googlecode.simple-jpa-dao:dao-namedid-test:${simple_jpa_dao_version}",
                simple_jpa_dao_genid_test: "com.googlecode.simple-jpa-dao:dao-genid-test:${simple_jpa_dao_version}",
                simple_jpa_dao_base_test: "com.googlecode.simple-jpa-dao:dao-base-test:${simple_jpa_dao_version}",
                task_dispatch_dispatch_api: "com.googlecode.taskqueue-dispatch:dispatch-api:${taskqueue_dispatch_version}",
                jukito: "org.jukito:jukito:1.1",
                test_ng: "org.testng:testng:6.1.1",
                tomcat: ["org.apache.tomcat:catalina:${tomcatVersion}",
                        "org.apache.tomcat:coyote:${tomcatVersion}",
                        "org.apache.tomcat:juli:${tomcatVersion}",
                        "org.apache.tomcat:jasper:${tomcatVersion}"],
                http_unit: "httpunit:httpunit:1.7",
                validation_api: 'javax.validation:validation-api:1.0.0.GA',
                jetty: ["org.mortbay.jetty:jetty:${jetty_version}", "org.mortbay.jetty:jetty-util:${jetty_version}"],
                simple_blobstore_api: "com.googlecode.simpleblobstore:blobstore-api:${simple_blobstore_version}",
                simple_blobstore_j2ee: "com.googlecode.simpleblobstore:blobstore-j2ee:${simple_blobstore_version}",
                simple_blobstore_gae: "com.googlecode.simpleblobstore:blobstore-gae:${simple_blobstore_version}"


        ]
    }

}

subprojects {

    //ext.libs = ext.libs
    configurations {
        jalopy
    }
    apply plugin: 'java'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6
    //ext.ext.libs = ext.libs

//    dependencies {
//        jalopy 'jalopy:jalopy-ant:0.1-1.5b5', 'jalopy:jalopy:1.5rc3'
//    }

//    task jalopy(dependsOn: classes) << {
//
//        ant.taskdef(name: 'jalopy',
//                classname: 'de.hunsicker.jalopy.plugin.ant.AntPlugin',
//                classpath: configurations.jalopy.asPath)
//        if (file("src/main/java").isDirectory()) {
//            ant.jalopy(convention: "${rootDir}/config/jalopy/jalopy-convention.xml") {
//                fileset(dir: "src/main/java") {
//                    include(name: '**/*.java')
//                }
//            }
//        }
//        if (file("src/test/java").isDirectory()) {
//            ant.jalopy(convention: "${rootDir}/config/jalopy/jalopy-convention.xml") {
//                fileset(dir: "src/test/java") {
//                    include(name: '**/*.java')
//                }
//
//            }
//        }
//    }
    apply plugin: 'pmd'
    //[pmdTest]*.ignoreFailures = false

    if ("${analysis}" == "true") {

        apply plugin: 'jdepend'
        apply plugin: 'findbugs'
        apply plugin: 'checkstyle'
        apply plugin: 'project-report'

        checkstyle {
            configFile = file("../config/checkstyle/checkstyle.xml")
        }

        [checkstyleMain, checkstyleTest]*.ignoreFailures = true
        findbugsMain {
            ignoreFailures = true
        }

        findbugsTest {
            ignoreFailures = true
        }


    }

    if ("${cobertura}" == "true") {
        buildscript {
            apply from: 'https://github.com/valkolovos/gradle_cobertura/raw/master/repo/gradle_cobertura/gradle_cobertura/1.2.1/coberturainit.gradle'
        }

    }
//    if ("${run_jalopy}" == "true") {
//        check.dependsOn jalopy
//    }

    test {
        jvmArgs "-XX:MaxPermSize=256m"
    }

    repositories {
        maven {
            url maven_repo
            artifactUrls "http://fspotcloud-maven.googlecode.com/svn/maven/repository",
                    "http://maven.fspotcloud.googlecode.com/hg/repo",
                    "http://maven-gae-plugin.googlecode.com/svn/repository",
                    "http://gwt-maven.googlecode.com/svn/trunk/mavenrepo/",
                    "http://www.datanucleus.org/downloads/maven2"
        }
        mavenLocal()
    }

}

task unittests(dependsOn: [
        ':server:test',
        ':peer:test',
        ':rpc:test',
        ':client:test',
        ':peer-rpc:test',
        ':model-api:test',
        ':model-jpa:test',
        ':model-jpa-gae:test',
        ':user-service-api:test',
        ':user-service-gae:test',
        ':user-service-openid:test',
        ':keyboard-action:test'
]) << {
    println "Done unit testing."
}
if ("${cobertura}" == "true") {
    task unittestcoverage(dependsOn: [
            ':server:cobertura',
            ':peer:cobertura',
            ':rpc:cobertura',
            ':client:cobertura',
            ':peer-rpc:cobertura',
            ':model-api:cobertura',
            ':model-jpa:cobertura',
            ':model-jpa-gae:cobertura',
            ':user-service-api:cobertura',
            ':user-service-gae:cobertura',
            ':user-service-openid:cobertura',
            ':keyboard-action:cobertura'
    ]) << {
        println "Done unit test coverage."
    }

    task clientUnittestCoverage(dependsOn: [
            ':client:cobertura'
    ]) << {
        println "Done client unit test coverage."
    }

    task serverUnittestCoverage(dependsOn: [
            ':server:cobertura'
    ]) << {
        println "Done server unit test coverage."
    }

    task keyboardactionUnittestCoverage(dependsOn: [
            ':keyboard-action:cobertura'
    ]) << {
        println "Done keyboard-action unit test coverage."
    }

    task rpcsUnittestCoverage(dependsOn: [
            ':rpc:cobertura',
            ':peer-rpc:cobertura'
    ]) << {
        println "Done rpc structs unit test coverage."
    }
}

