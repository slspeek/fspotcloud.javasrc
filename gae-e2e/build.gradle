import org.apache.tools.ant.filters.ExpandProperties

description = 'Selenium testing of prod-gae-war'

apply plugin: 'gae'
System.properties['appengine.sdk.root'] = System.properties['user.home'] + "/appengine-java-sdk-${gae_version}"
if ("${analysis}" == "true") {
    findbugsTest.enabled = false;
}
gae {
    stopKey = 'STOP'
    disableUpdateCheck = true
    warDir = file('build/exploded');
}
gaeRun.daemon = Boolean.parseBoolean(server_daemon)

dependencies {
    testCompile project(path: ':e2e-test', configuration: 'testCompile')
    testCompile ext.libs.gae_testing
    testCompile project(':model-jpa-gae')
    testCompile ext.libs.selenium
    testCompile ext.libs.guiceberry
    testCompile ext.libs.guava_testlib
    testCompile ext.libs.junit
    testCompile ext.libs.inject
    testCompile ext.libs.guice
}



task unpackWar(dependsOn: ':prod-gae-war:assemble') << {
    mkdir "$buildDir/exploded-war-raw"
    mkdir "$buildDir/exploded"
    def myTests = file("../prod-gae-war/build/libs/prod-gae-war-${version}.war")
    ant.unjar(dest: "$buildDir/exploded-war-raw/", src: myTests)
}

task copyWar(dependsOn: unpackWar, type: Copy) {
    ant.properties['bot.secret.userinput'] = "${bot_secret}".toString()
    from('build/exploded-war-raw') {
        include "**/properties.properties"
        filter(ExpandProperties, project: ant.project)
    }
    from('build/exploded-war-raw') {
        exclude "**/properties.properties"
    }
    into 'build/exploded'
}

task setupFixture(type: Copy, dependsOn: copyWar) {
    from('src/test/resources/') {
        include "local_db.bin"
    }
    into 'build/exploded/WEB-INF/appengine-generated/'
}

task unpackTest(dependsOn: ":e2e-test:packageTests") << {
    def myTests = file("../e2e-test/build/libs/e2e-test-${version}-tests.jar")
    ant.unjar(dest: "$buildDir/classes/test", src: myTests)
}

task peerStop(type: Exec) {
    commandLine "telnet", "localhost", "5555"
    ignoreExitValue = true
}

gaeRun.dependsOn setupFixture
test.dependsOn gaeRun, unpackTest, ":peer:assemble"

test {
    systemProperties['GuiceBerryEnvSelectorOverride_com.googlecode.fspotcloud.test.EmptyGuiceBerryEnv'] =
        'com.googlecode.fspotcloud.test.GaeWarGuiceBerryEnv'
    systemProperties['bot.secret'] = bot_secret
    systemProperties['endpoint'] = "localhost:8080"
    systemProperties['stop.port'] = "5555"
    systemProperties['pause.time'] = "${test_pause_time}"
    systemProperties['peer.jar'] = "../peer/build/libs/peer-${version}.jar"
    println "All tests: ${all_tests} pause time: ${test_pause_time}"
    if ("${all_tests}" == "true") {
        include "com/googlecode/fspotcloud/test/LocalSuite.class"
    } else {
        include "com/googlecode/fspotcloud/test/ShortSuite.class"
    }

    testLogging.showStandardStreams = true
}

clean.dependsOn gaeStop, peerStop

test << {
    println "Stopping GAE-server"
    gaeStop.execute()
    println "Stopping peer"
    peerStop.execute()
}
