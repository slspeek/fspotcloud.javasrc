import org.apache.tools.ant.filters.ExpandProperties

description = 'Selenium testing of prod-gae-war'

apply plugin: 'war'
apply plugin: 'appengine'

if ("${analysis}" == "true") {
    findbugsTest.enabled = false;
}

appengine {
    disableUpdateCheck = true
    warDir = file('build/exploded');
}
appengineRun.daemon = Boolean.parseBoolean(server_daemon)

//configurations {
		//testCompile
		//functionalTest.extendsFrom(testCompile)
//}

dependencies {
    functionalTestCompile project(path: ':e2e-test', configuration: 'testCompile')
    functionalTestCompile libs.gae_testing
    functionalTestCompile project(':model-jpa-gae')
    functionalTestCompile libs.selenium
    functionalTestCompile libs.guiceberry
    functionalTestCompile libs.guava_testlib
    functionalTestCompile libs.junit
    functionalTestCompile libs.inject
    functionalTestCompile libs.guice
}

task unpackWar(dependsOn: ':prod-gae-war:assemble') << {
    mkdir "$buildDir/exploded-war-raw"
    mkdir "$buildDir/exploded"
    def myTests = file("../prod-gae-war/build/libs/prod-gae-war-${version}.war")
    ant.unjar(dest: "$buildDir/exploded-war-raw/", src: myTests)
}

task copyWar(dependsOn: unpackWar, type: Copy) {
    ant.properties['bot.secret.userinput'] = "${bot_secret}".toString()
    from('build/exploded-war-raw') {
        include "**/properties.properties"
        filter(ExpandProperties, project: ant.project)
    }
    from('build/exploded-war-raw') {
        exclude "**/properties.properties"
    }
    into 'build/exploded'
}

task setupFixture(type: Copy, dependsOn: copyWar) {
    from('src/functionalTest/resources/') {
        include "local_db.bin"
    }
    into 'build/exploded/WEB-INF/appengine-generated/'
}

task unpackTest(dependsOn: ":e2e-test:packageTests") << {
    def myTests = file("../e2e-test/build/libs/e2e-test-${version}-tests.jar")
    ant.unjar(dest: "$buildDir/classes/functionalTest", src: myTests)
}

task peerStop(type: Exec) {
    commandLine "telnet", "localhost", "5555"
    ignoreExitValue = true
}

appengineRun.dependsOn setupFixture
appengineFunctionalTest.dependsOn appengineRun, unpackTest

appengineFunctionalTest {
    systemProperty 'GuiceBerryEnvSelectorOverride_com.googlecode.fspotcloud.test.EmptyGuiceBerryEnv',
        'com.googlecode.fspotcloud.test.GaeWarGuiceBerryEnv'
    systemProperty 'bot.secret', bot_secret
    systemProperty 'endpoint', "localhost:8080"
    systemProperty 'stop.port', "5555"
    systemProperty 'pause.time', "${test_pause_time}"
    systemProperty 'fspotcloud.test.shotwell', 'true'
    systemProperty 'peer.jar', "../peer/build/libs/peer-${version}.jar"
    println "All tests: ${all_tests} pause time: ${test_pause_time}"
    if ("${all_tests}" == "true") {
        include "com/googlecode/fspotcloud/test/LocalSuite.class"
    } else {
        include "com/googlecode/fspotcloud/test/ShortSuite.class"
    }

    testLogging.showStandardStreams = true
    reports.junitXml.destination =file("${project.testResultsDir}/shotwell")
    reports.html.destination =file("${project.testResultsDir}/shotwell")
}

clean.dependsOn appengineStop, peerStop
