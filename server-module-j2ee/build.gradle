description = 'F-SpotCloud Server J2EE Configuration'

configurations {
    integrationTest
    testCompile.extendsFrom(integrationTest)
    provided
}

sourceSets {
    main { compileClasspath += configurations.provided }
}
if ("${analysis}" == "true") {
    findbugsTest.enabled = false
}

dependencies {
    compile project(':server')
    compile project(':user-service-api')
    compile project(':user-service-openid')
    compile project(':model-jpa-j2ee')
    compile project(path: ':user-service-api', configuration: 'testFixtures')   //FIXME
    compile("com.googlecode.bot-dispatch:command-jpa-j2ee:${bot_dispatch_version}")
    compile("com.googlecode.taskqueue-dispatch:direct:${taskqueue_dispatch_version}")
    compile libs.simple_blobstore_j2ee
    compile("com.googlecode.bot-dispatch:command-jpa:${bot_dispatch_version}") {
        exclude(module: 'gwt-user')
    }
    compile libs.bot_dispatch_command_api
    provided libs.servlet_spec
    testCompile project(':peer')
    testCompile project(':test-util')
    testCompile project(path: ':peer-server-integration', configuration: 'testCompile')
    testCompile libs.mockito
    testCompile libs.guava_testlib
    testCompile libs.junit
    testCompile libs.test_ng

    integrationTest files("../peer-server-integration/build/libs/peer-server-integration-${version}-tests.jar")
}

task deleteDB(type: Delete) {
	println "About to delete the test databse"
    delete 'MODELJPA', 'runtime', 'derby.log'
}

task unpackTest << {
    def myTests = configurations.integrationTest.files.iterator().next()
    ant.unjar(dest: "$buildDir/classes/test", src: myTests)
}


test {
	exclude "*"
}

task testShotwell(type:Test, dependsOn: [unpackTest, deleteDB]) {
	useTestNG {
		outputDirectory = file("$buildDir/shotwell")
	}
	systemProperty 'GuiceBerryEnvSelectorOverride_com.googlecode.fspotcloud.server.admin.integration.NoAuthPlaceHolderIntegrationModule',
        'com.googlecode.fspotcloud.server.admin.integration.J2eeNoAuthShotwellIntegrationModule'
    systemProperty 'GuiceBerryEnvSelectorOverride_com.googlecode.fspotcloud.server.admin.integration.PlaceHolderIntegrationModule',
        'com.googlecode.fspotcloud.server.admin.integration.J2eeShotwellIntegrationModule'
    systemProperty 'fspotcloud.test.shotwell', 'true'
    systemProperty 'photo.dir.original', '//home/fspot/Photos'
    //testLogging.showStandardStreams = true
    reports.junitXml.destination =file("${project.testResultsDir}/shotwell")
    reports.html.destination =file("${project.testResultsDir}/shotwell")
}


task testFSpot(type:Test, dependsOn: [unpackTest, deleteDB]) {
	useTestNG {
		outputDirectory = file("$buildDir/fspot")
	}
	systemProperty 'photo.dir.original', '//home/steven/Photos'
    systemProperty 'GuiceBerryEnvSelectorOverride_com.googlecode.fspotcloud.server.admin.integration.NoAuthPlaceHolderIntegrationModule',
        'com.googlecode.fspotcloud.server.admin.integration.J2eeNoAuthFSpotIntegrationModule'
    systemProperty 'GuiceBerryEnvSelectorOverride_com.googlecode.fspotcloud.server.admin.integration.PlaceHolderIntegrationModule',
        'com.googlecode.fspotcloud.server.admin.integration.J2eeFSpotIntegrationModule'
    //testLogging.showStandardStreams = true
    reports.junitXml.destination =file("${project.testResultsDir}/fspot")
    reports.html.destination =file("${project.testResultsDir}/fspot")
}

test.dependsOn testShotwell, testFSpot
test.useTestNG()

clean.dependsOn deleteDB
